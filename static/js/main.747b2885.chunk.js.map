{"version":3,"sources":["components/Content.js","components/Main.js","components/Footer.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Content","props","message","Main","useState","setMessage","handleChange","e","preventDefault","target","value","console","log","Navbar","bg","variant","fixed","Brand","Nav","className","DropdownButton","id","title","Dropdown","Item","onClick","type","as","Form","inline","FormControl","name","placeholder","onChange","Footer","href","rel","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.747b2885.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default function Content(props) {\n    return (\n        <div >\n        { props.message }\n        </div>\n    )\n}\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport {useState} from 'react'\nimport Content from './Content'\n\n\n\nexport default function Main() {\n\n  const [message, setMessage]=useState();\n\n  function handleChange(e){\n  e.preventDefault()\n  setMessage(e.target.value)\n  console.log(e.target.value)}\n\n  return (\n    <div>\n      <Navbar bg=\"l\" variant=\"light\" fixed=\"top\">\n        <Navbar.Brand>sayHey</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <DropdownButton id=\"dropdown-item-button\" title=\"Presets\">\n            <Dropdown.Item onClick={handleChange} value=\"Hey, I'm Zach\" type=\"text\" as=\"button\">Hey, I'm Zach</Dropdown.Item>\n            <Dropdown.Item onClick={handleChange}  value=\"512-740-3455\" type=\"text\" as=\"button\">512-740-3455</Dropdown.Item>\n            <Dropdown.Item onClick={handleChange}  value=\"What's your name?\" type=\"text\"as=\"button\">What's your name?</Dropdown.Item>\n            <Dropdown.Item onClick={handleChange}  value=\"May I sit with you?\" type=\"text\" as=\"button\">May I sit with you?</Dropdown.Item>\n          </DropdownButton>\n        </Nav>\n        <Form inline>\n          <FormControl name=\"message\" type=\"text\" placeholder=\"Message\" onChange={handleChange} className=\"mr-sm-2\" />\n        </Form>\n      </Navbar>\n      <div className=\"buffer\"/>\n      <div className=\"content justify-content-center row\"> \n      <Content \n      message={message}/>\n      </div>\n      \n    </div>\n  );\n}\n\n\n","import Navbar from 'react-bootstrap/Navbar'\nimport React from 'react'\n\nexport default function Footer() {\n    return (\n        <div className=\"footer\" >\n            <Navbar className=\"justify-content-center\" fixed=\"bottom\">\n    <Navbar.Brand href=\"#home\">\n      <a className=\"footerLink\" rel=\"noreferrer\" target=\"_blank\" href=\"https://zachyanez.com\">By Zach Yanez</a>\n    </Navbar.Brand>\n  </Navbar>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}