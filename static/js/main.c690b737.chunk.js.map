{"version":3,"sources":["components/Content.js","components/Main.js","components/Footer.js","App.js","utils/db.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Content","props","className","message","Main","INITIAL_PRESETS","id","useIndexedDB","add","getAll","deleteRecord","useState","setMessage","preset","setPreset","presets","setPresets","useEffect","a","records","console","log","populateStateWithDbRecords","show","setShow","handleClose","generatedId","prevPresets","error","Navbar","bg","variant","fixed","Brand","Nav","DropdownButton","title","Dropdown","Item","onClick","type","as","Modal","onHide","Header","closeButton","Title","Body","InputGroup","FormControl","onChange","e","target","value","this","placeholder","aria-label","aria-describedby","Append","Text","map","then","alert","presetsCopy","indexOfRecordToDelete","findIndex","p","splice","deletePreset","Form","inline","name","preventDefault","Footer","href","rel","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","Message","keypath","options","unique","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c690b737.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default function Content(props) {\n    return (\n        <div className=\"messagePadding\">\n        { props.message }\n        </div>\n    )\n}\n","import React from \"react\";\nimport { useIndexedDB } from \"react-indexed-db\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Modal from \"react-bootstrap/Modal\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { useState, useEffect } from \"react\";\nimport Content from \"./Content\";\n\nexport default function Main() {\n  const INITIAL_PRESETS = [{ id: -1, message: \"Hey\" }];\n  const { add, getAll, deleteRecord } = useIndexedDB(\"presets\");\n\n  const [message, setMessage] = useState();\n  const [preset, setPreset] = useState(\"\");\n  const [presets, setPresets] = useState(INITIAL_PRESETS);\n\n  useEffect(() => {\n    const populateStateWithDbRecords = async () => {\n      const records = await getAll();\n      console.log(\"records found in DB, udpating state: \", records);\n      setPresets([...INITIAL_PRESETS, ...records]);\n    };\n\n    populateStateWithDbRecords();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function handleChange(e) {\n    e.preventDefault();\n    setMessage(e.target.value);\n    console.log(e.target.value);\n  }\n\n  function handlePreset(e) {\n    setPreset(e.target.value);\n  }\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  async function AddPresets() {\n    try {\n      const generatedId = await add({ message: preset });\n      console.log(\"Added to db: \", { id: generatedId, message: preset });\n\n      setPresets((prevPresets) => {\n        return [...prevPresets, { id: generatedId, message: preset }];\n      });\n    } catch (err) {\n      console.error(err);\n    }\n    handleClose();\n  }\n\n\n  function deletePreset(id) {\n    deleteRecord(id).then(() => {\n      alert(`Deleted ${id}`);\n    });\n\n    setPresets((prevPresets) => {\n      const presetsCopy = [...prevPresets];\n      const indexOfRecordToDelete = presetsCopy.findIndex((p) => p.id === id);\n      const howManyToDelete = 1;\n      presetsCopy.splice(indexOfRecordToDelete, howManyToDelete);\n      return presetsCopy;\n    });\n  }\n\n  return (\n    <div>\n      <Navbar bg=\"l\" variant=\"light\" fixed=\"top\">\n        <Navbar.Brand>sayHey</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <DropdownButton id=\"dropdown-item-button\" title=\"Presets\">\n            <Dropdown.Item onClick={handleShow} type=\"text\" as=\"button\">\n              Add Preset +\n            </Dropdown.Item>\n            <Modal show={show} onHide={handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Add Preset</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <InputGroup className=\"mb-3\">\n                  <FormControl\n                    onChange={handlePreset}\n                    value={this}\n                    placeholder=\"Message\"\n                    aria-label=\"Message Preset\"\n                    aria-describedby=\"basic-addon2\"\n                  />\n                  <InputGroup.Append>\n                    <InputGroup.Text onClick={AddPresets} id=\"basic-addon2\">\n                      Save\n                    </InputGroup.Text>\n                  </InputGroup.Append>\n                </InputGroup>\n              </Modal.Body>\n            </Modal>\n            {presets.map((preset) => {\n              const { id, message } = preset;\n              return (\n                <Dropdown.Item\n                  key={message}\n                  onClick={() => setMessage(message)}\n                  value={message}\n                  type=\"text\"\n                  as=\"button\"\n                >\n                  {message}\n                  <a\n                    onClick={() => {\n                      deletePreset(id);\n                    }}\n                    className=\"deleteBtn\"\n                    as=\"button\"\n                  >\n                    x\n                  </a>\n                </Dropdown.Item>\n              );\n            })}\n          </DropdownButton>\n        </Nav>\n        <Form inline>\n          <FormControl\n            name=\"message\"\n            type=\"text\"\n            placeholder=\"Message\"\n            value={message}\n            onChange={handleChange}\n            className=\"mr-sm-2\"\n          />\n        </Form>\n      </Navbar>\n      <div className=\"buffer\" />\n      <div className=\"content justify-content-center row\">\n        <Content message={message} />\n      </div>\n    </div>\n  );\n}\n","import Navbar from \"react-bootstrap/Navbar\";\nimport React from \"react\";\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      <Navbar className=\"justify-content-center\" fixed=\"bottom\">\n        <Navbar.Brand href=\"#home\">\n          <a className=\"footerLink\" rel=\"noreferrer\" target=\"_blank\" href=\"https://zachyanez.com\">\n            By Zach Yanez\n          </a>\n          <a className=\"Install\" target=\"_blank\" href=\"https://docs.google.com/document/d/1cJESFTKpnsXO5vtK2foLeTPzledAYLUTQNWOR5kdMV8/edit?usp=sharing\">[Instructions]</a>\n        </Navbar.Brand>\n      </Navbar>\n    </div>\n  );\n}\n","import React from 'react';\nimport { DBConfig } from './utils/db'\nimport { initDB } from 'react-indexed-db'\nimport { useIndexedDB } from 'react-indexed-db'\nimport './App.css';\nimport Main from './components/Main';\nimport Footer from \"./components/Footer\";\n\n\n\ninitDB(DBConfig);\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","\nexport const DBConfig = {\n        name: 'SayHeyDB',\n        version: 1,\n        objectStoresMeta: [\n          {\n            store: 'presets',\n            storeConfig: { keyPath: 'id', autoIncrement: true },\n            storeSchema: [\n              { Message: 'message', keypath: 'message', options: { unique: true } }\n            ]\n          }\n        ]\n      };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}